{"version":3,"sources":["../../api/server.js"],"names":["normalizePort","val","port","parseInt","isNaN","process","env","PORT","app","set","errorHandler","error","syscall","address","server","bind","code","console","exit","http","createServer","on","log","listen"],"mappings":";;;;AAAA;;AACA;;AAD2B;AAG3B;AACA;AACA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,GAAG,EAAI;AAC5B,MAAMC,IAAI,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAArB;;AAEA,MAAGG,KAAK,CAACF,IAAD,CAAR,EACA;AACC,WAAOD,GAAP;AACA;;AACD,MAAGC,IAAI,IAAI,CAAX,EACA;AACC,WAAOA,IAAP;AACA;;AACD,SAAO,KAAP;AACA,CAZD;;AAcA,IAAMA,IAAI,GAAGF,aAAa,CAACK,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;;AAEAC,gBAAIC,GAAJ,CAAQ,MAAR,EAAgBP,IAAhB,E,CAEA;AACA;;;AACA,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC7B,MAAGA,KAAK,CAACC,OAAN,KAAkB,QAArB,EACA;AACC,UAAMD,KAAN;AACA;;AACD,MAAME,OAAO,GAAGC,MAAM,CAACD,OAAP,EAAhB;AACA,MAAME,IAAI,GAAG,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,UAAUA,OAAxC,GAAkD,WAAWX,IAA1E;;AACA,UAAQS,KAAK,CAACK,IAAd;AACA,SAAK,QAAL;AACCC,MAAAA,OAAO,CAACN,KAAR,CAAcI,IAAI,GAAG,gCAArB;AACAV,MAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACA;;AACD,SAAK,YAAL;AACCD,MAAAA,OAAO,CAACN,KAAR,CAAcI,IAAI,GAAG,oBAArB;AACAV,MAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACA;;AACD;AACC,YAAMP,KAAN;AAVD;AAYA,CAnBD;;AAqBA,IAAMG,MAAM,GAAGK,iBAAKC,YAAL,CAAkBZ,eAAlB,CAAf;;AAEAM,MAAM,CAACO,EAAP,CAAU,OAAV,EAAmBX,YAAnB;AACAI,MAAM,CAACO,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC5B,MAAMR,OAAO,GAAGC,MAAM,CAACD,OAAP,EAAhB;AACA,MAAME,IAAI,GAAG,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,UAAUA,OAAxC,GAAkD,UAAUX,IAAzE;AACAe,EAAAA,OAAO,CAACK,GAAR,CAAY,kBAAkBP,IAA9B;AACA,CAJD;AAMAD,MAAM,CAACS,MAAP,CAAcrB,IAAd,E,CAAoB","sourcesContent":["import http from \"http\"    // import Node native http package\nimport app from \"./app\"\n\n// returns a valid port \n// whether port is passed as number or a string\nconst normalizePort = val => {\n\tconst port = parseInt(val, 10)\n\n\tif(isNaN(port))\n\t{\n\t\treturn val\n\t}\n\tif(port >= 0)\n\t{\n\t\treturn port\n\t}\n\treturn false\n}\n\nconst port = normalizePort(process.env.PORT || \"8080\")\n\napp.set(\"port\", port)\n\n// checks for various errors and handles them appropriately, \n// also registers them to the server\nconst errorHandler = error => {\n\tif(error.syscall !== \"listen\")\n\t{\n\t\tthrow error\n\t}\n\tconst address = server.address()\n\tconst bind = typeof address === \"string\" ? \"pipe \" + address : \"port: \" + port\n\tswitch (error.code) {\n\tcase \"EACCES\":\n\t\tconsole.error(bind + \"requires elevated priviledges.\")\n\t\tprocess.exit(1)\n\t\tbreak\n\tcase \"EADDRINUSE\":\n\t\tconsole.error(bind + \"is already in use.\")\n\t\tprocess.exit(1)\n\t\tbreak\n\tdefault:\n\t\tthrow error\n\t}\n}\n\nconst server = http.createServer(app)\n\nserver.on(\"error\", errorHandler)\nserver.on(\"listening\", () => {\n\tconst address = server.address()\n\tconst bind = typeof address === \"string\" ? \"pipe \" + address : \"port \" + port\n\tconsole.log(\"Listening on \" + bind)\n})\n\nserver.listen(port) //set server to listen with either production or local port"],"file":"server.js"}