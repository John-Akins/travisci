{"version":3,"sources":["../../../api/db/index.js"],"names":["env","process","NODE_ENV","undefined","trim","configJson","database","username","password","host","connectionString","pool","Pool","on","err","console","error","exit","db","query","queryString","Promise","resolve","reject","connect","client","done","stack","result","queryAll","rows","queryWhere"],"mappings":"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","sourcesContent":["import { Pool } from 'pg'\nimport configJson from '../config/config';\n\n\n\nconst env = (! typeof process.env.NODE_ENV === undefined) ? 'development' : process.env.NODE_ENV.trim()\n\nconst { database, username, password, host } = configJson[env]\n\nconst connectionString = `postgressql://${username}:${password}@${host}:5432/${database}`\n\nconst pool = new Pool({connectionString : connectionString})\n// the pool will emit an error on behalf of any idle clients it contains\n// if a backend error or network partition happens\npool.on('error', (err) => {\n\tconsole.error('Unexpected error on idle client', err)\n\tprocess.exit(-1)\n})\n\nconst db = {}\n\ndb.query = (queryString) =>  {\n\treturn new Promise((resolve, reject) => {\n\t\tpool.connect((err, client, done) => {\n\t\t\tif(err)\n\t\t\t{\n\t\t\t\treject({\n\t\t\t\t\terror: 'QueryError' + err.stack\n\t\t\t\t})\n\t\t\t}\t\t\t\t\n\t\t\tclient.query(queryString, (err,result) => {\n\t\t\t//call `done()` to release the client back to the pool\n\t\t\t\tdone()\n\t\t\t\tif(err)\n\t\t\t\t{\n\t\t\t\t\treject({\n\t\t\t\t\t\terror: 'QueryError' + err.stack\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tresolve(result)\n\t\t\t})\n\t\t})\n\t})\n}\n\ndb.queryAll = (queryString) =>  {\n\treturn new Promise((resolve, reject) => {\n\t\tpool.connect((err, client, done) => {\n\t\t\tif(err)\n\t\t\t{\n\t\t\t\treject({\n\t\t\t\t\terror: 'QueryError' + err.stack\n\t\t\t\t})\n\t\t\t}\t\t\t\t\n\t\t\tclient.query(queryString, (err,result) => {\n\t\t\t//call `done()` to release the client back to the pool\n\t\t\t\tdone()\n\t\t\t\tif(err)\n\t\t\t\t{\n\t\t\t\t\treject({\n\t\t\t\t\t\terror: 'QueryError' + err.stack\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tresolve(result.rows)\n\t\t\t})\n\t\t})\n\t})\n}\n\ndb.queryWhere = (query) =>  {\n\treturn new Promise((resolve, reject) => {\n\t\tpool.connect((err, client, done) => {\n\t\t\tif(err)\n\t\t\t{\n\t\t\t\treject({\n\t\t\t\t\terror: 'QueryError' + err.stack\n\t\t\t\t})\n\t\t\t}\n\t\t\tclient.query(query, (err,result) => {\n\t\t\t\tdone()\n\t\t\t\tif(err)\n\t\t\t\t{\n\t\t\t\t\treject({\n\t\t\t\t\t\terror: 'QueryError' + err.stack\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tresolve(result.rows)\n\t\t\t})\n\t\t})\n\t})\n}\n\nexport default db"],"file":"index.js"}