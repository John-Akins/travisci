{"version":3,"sources":["../../../api/db/index.js"],"names":["connectionString","pool","Pool","on","err","console","error","process","exit","queryAll","queryString","Promise","resolve","reject","connect","client","done","stack","query","result","rows","queryWhere"],"mappings":";;;;;;;AAAA;;AACA,IAAMA,gBAAgB,GAAG,qDAAzB;AAEA,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAS;AAACF,EAAAA,gBAAgB,EAAGA;AAApB,CAAT,CAAb,C,CACA;AACA;;AACAC,IAAI,CAACE,EAAL,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAS;AACzBC,EAAAA,OAAO,CAACC,KAAR,CAAc,iCAAd,EAAiDF,GAAjD;AACAG,EAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,CAAd;AACA,CAHD;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,WAAD,EAAkB;AAClC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCZ,IAAAA,IAAI,CAACa,OAAL,CAAa,UAACV,GAAD,EAAMW,MAAN,EAAcC,IAAd,EAAuB;AACnC,UAAGZ,GAAH,EACA;AACCS,QAAAA,MAAM,CAAC;AACNP,UAAAA,KAAK,EAAE,eAAeF,GAAG,CAACa;AADpB,SAAD,CAAN;AAGA;;AACDF,MAAAA,MAAM,CAACG,KAAP,CAAaR,WAAb,EAA0B,UAACN,GAAD,EAAKe,MAAL,EAAgB;AAC1C;AACCH,QAAAA,IAAI;;AACJ,YAAGZ,GAAH,EACA;AACCS,UAAAA,MAAM,CAAC;AACNP,YAAAA,KAAK,EAAE,eAAeF,GAAG,CAACa;AADpB,WAAD,CAAN;AAGA;;AACDL,QAAAA,OAAO,CAACO,MAAM,CAACC,IAAR,CAAP;AACA,OAVD;AAWA,KAlBD;AAmBA,GApBM,CAAP;AAqBA,CAtBD;;AAwBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACH,KAAD,EAAY;AAC9B,SAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCZ,IAAAA,IAAI,CAACa,OAAL,CAAa,UAACV,GAAD,EAAMW,MAAN,EAAcC,IAAd,EAAuB;AACnC,UAAGZ,GAAH,EACA;AACCS,QAAAA,MAAM,CAAC;AACNP,UAAAA,KAAK,EAAE,eAAeF,GAAG,CAACa;AADpB,SAAD,CAAN;AAGA;;AACDF,MAAAA,MAAM,CAACG,KAAP,CAAaA,KAAb,EAAoB,UAACd,GAAD,EAAKe,MAAL,EAAgB;AACnCH,QAAAA,IAAI;;AACJ,YAAGZ,GAAH,EACA;AACCS,UAAAA,MAAM,CAAC;AACNP,YAAAA,KAAK,EAAE,eAAeF,GAAG,CAACa;AADpB,WAAD,CAAN;AAGA;;AACDL,QAAAA,OAAO,CAACO,MAAM,CAACC,IAAR,CAAP;AACA,OATD;AAUA,KAjBD;AAkBA,GAnBM,CAAP;AAoBA,CArBD;;eAuBe;AAAEX,EAAAA,QAAQ,EAARA,QAAF;AAAYY,EAAAA,UAAU,EAAVA;AAAZ,C","sourcesContent":["import { Pool } from \"pg\"\nconst connectionString = \"postgressql://postgres:root@localhost:5432/teamwork\"\n\nconst pool = new Pool({connectionString : connectionString})\n// the pool will emit an error on behalf of any idle clients it contains\n// if a backend error or network partition happens\npool.on(\"error\", (err) => {\n\tconsole.error(\"Unexpected error on idle client\", err)\n\tprocess.exit(-1)\n})\n\nconst queryAll = (queryString) =>  {\n\treturn new Promise((resolve, reject) => {\n\t\tpool.connect((err, client, done) => {\n\t\t\tif(err)\n\t\t\t{\n\t\t\t\treject({\n\t\t\t\t\terror: \"QueryError\" + err.stack\n\t\t\t\t})\n\t\t\t}\t\t\t\t\n\t\t\tclient.query(queryString, (err,result) => {\n\t\t\t//call `done()` to release the client back to the pool\n\t\t\t\tdone()\n\t\t\t\tif(err)\n\t\t\t\t{\n\t\t\t\t\treject({\n\t\t\t\t\t\terror: \"QueryError\" + err.stack\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tresolve(result.rows)\n\t\t\t})\n\t\t})\n\t})\n}\n\nconst queryWhere = (query) =>  {\n\treturn new Promise((resolve, reject) => {\n\t\tpool.connect((err, client, done) => {\n\t\t\tif(err)\n\t\t\t{\n\t\t\t\treject({\n\t\t\t\t\terror: \"QueryError\" + err.stack\n\t\t\t\t})\n\t\t\t}\n\t\t\tclient.query(query, (err,result) => {\n\t\t\t\tdone()\n\t\t\t\tif(err)\n\t\t\t\t{\n\t\t\t\t\treject({\n\t\t\t\t\t\terror: \"QueryError\" + err.stack\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tresolve(result.rows)\n\t\t\t})\n\t\t})\n\t})\n}\n\nexport default { queryAll, queryWhere }"],"file":"index.js"}