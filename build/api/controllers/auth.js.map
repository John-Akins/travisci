{"version":3,"sources":["../../../api/controllers/auth.js"],"names":["bcrypt","require","jwt","validationResult","db","authController","signin","req","res","errors","isEmpty","status","json","error","array","userEmail","body","email","userPassword","password","query","name","text","values","queryWhere","then","user","undefined","userId","isAdmin","compare","valid","token","sign","expiresIn","data","jobRole","emailExists","Promise","resolve","reject","createUser","firstName","lastName","address","gender","department","isDuplicate","Date","getTime","headers","authorization","split","hash","message"],"mappings":"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","sourcesContent":["const bcrypt = require(\"bcrypt\")\nconst jwt = require(\"jsonwebtoken\")\nconst { validationResult } = require(\"express-validator\")\n\nconst db = require(\"../db/index\")\n\nconst authController = {}\n\tauthController.signin = (req, res) => {\n\t\tconst errors = validationResult(req)\n\t\tif (!errors.isEmpty()) \n\t\t{\n\t\t\tres.status(422).json({\n\t\t\t\tstatus: \"error\",\n\t\t\t\terror: errors.array()\n\t\t\t})\t\t\t\t\n\t\t}\n\t\n\t\tconst userEmail = req.body.email\n\t\tconst userPassword = req.body.password\t\n\t\n\t\tconst query = {\n\t\t\t// give the query a unique name\n\t\t\tname: \"fetch-user\",\n\t\t\ttext: \"SELECT * FROM users WHERE email = $1\",\n\t\t\tvalues: [userEmail]\n\t\t}\n\t\tdb.queryWhere(query)\n\t\t\t.then((user) => {\n\t\t\t\tif(user[0] === undefined)\n\t\t\t\t{\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\terror: \"incorrect email or password\"\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst userId = user[0].userId \n\t\t\t\t\tconst isAdmin = user[0].isAdmin\n\t\t\t\t\tbcrypt.compare(userPassword, user[0].password)\n\t\t\t\t\t\t.then((valid) => {\n\t\t\t\t\t\t\tif(!valid)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\t\terror: \"incorrect email or password\"\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tconst token = jwt.sign({userId: userId, isAdmin: isAdmin},\"$hdsJmzjQ7,E.m2y$12$1iTvLIHS60iMROUjADnu8tdiUguselTrWjDo6SxVf\",\n\t\t\t\t\t\t\t\t{expiresIn: \"24h\"}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tstatus : \"success\",\n\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\ttoken : token,\n\t\t\t\t\t\t\t\t\tuserId: user[0].userId,\n\t\t\t\t\t\t\t\t\tjobRole: user[0].jobRole\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})           \t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error)  => {\n\t\t\t\t\t\t\tres.status(401).json({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\terror: \"incorrect email or password\",\n\t\t\t\t\t\t\t})                    \n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tres.status(403).json({\n\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\terror: \"server error\"\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\n\tauthController.emailExists = (email) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst query = {\n\t\t\t\t// give the query a unique name\n\t\t\t\tname: \"fetch-user\",\n\t\t\t\ttext: \"SELECT * FROM users WHERE email = $1\",\n\t\t\t\tvalues: [email],\n\t\t\t}\n\t\t\tdb.queryWhere(query)\n\t\t\t\t.then((user) => {\n\t\t\t\t\tif(user[0] !== undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t}\n\t\t\t\t\tresolve(false)\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject({\n\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\terror: \"could not perform request\"\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t})\n\t}\t\n\n\tauthController.createUser = (req, res) => {\n\t\tconst errors = validationResult(req)\n\t\tif (!errors.isEmpty())\n\t\t{\n\t\t\treturn res.status(422).json({\t\n\t\t\t\tstatus: \"error\",\n\t\t\t\terror: errors.array()\n\t\t\t})\n\t\t}\n\t\t\n\t\tconst { firstName, lastName, email, address, password, gender, jobRole, department, isAdmin } = req.body\n\t\n\t\tthis.emailExists(email)\n\t\t\t.then((isDuplicate) => {\n\t\t\t\tif(isDuplicate === true)\n\t\t\t\t{\n\t\t\t\t\treturn res.status(402).json({\n\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\terror: \"this email already exists\"\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst userId = new Date().getTime()\n\t\t\t\t\tconst token = (! req.headers.authorization) ? \"\" : req.headers.authorization.split()[1]\n\t\t\t\t\tbcrypt.hash(password, 10).then(\n\t\t\t\t\t\t(hash) => {\n\t\t\t\t\t\t\tconst query = {\n\t\t\t\t\t\t\t\tname: \"create-user\",\n\t\t\t\t\t\t\t\ttext: \"INSERT INTO users(\\\"userId\\\", \\\"firstName\\\", \\\"lastName\\\", \\\"email\\\", \\\"address\\\", \\\"password\\\", \\\"gender\\\", \\\"jobRole\\\", \\\"department\\\", \\\"isAdmin\\\", \\\"isNewAccount\\\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\",\n\t\t\t\t\t\t\t\tvalues: [userId, firstName, lastName, email, address, hash, gender, jobRole, department, isAdmin, true]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdb.queryWhere(query)\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\t\t\tstatus : \"success\",\n\t\t\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\t\t\tmessage: \"User account successfully created\",\n\t\t\t\t\t\t\t\t\t\t\ttoken : token,\n\t\t\t\t\t\t\t\t\t\t\tuserId: userId,\n\t\t\t\t\t\t\t\t\t\t\tjobRole: jobRole\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\t\t\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\t\tres.status(500).json({\n\t\t\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\t\t\terror: \"Internal server error \"  + error\n\t\t\t\t\t\t\t\t\t})\t\n\t\t\t\t\t\t\t\t})\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tres.status(500).json({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\terror: error\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tres.status(500).json({\n\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\terror: error\n\t\t\t\t})\n\t\t\t})\n\t\n\t}\n\nexport default authController"],"file":"auth.js"}