{"version":3,"sources":["../../../api/controllers/auth.js"],"names":["bcrypt","require","jwt","validationResult","db","authController","signin","req","res","status","json","error","emailExists","email","Promise","resolve","reject","query","name","text","values","queryWhere","then","user","undefined","createUser","errors","isEmpty","array","body","firstName","lastName","address","password","gender","jobRole","department","isAdmin","isDuplicate","userId","Date","getTime","token","headers","authorization","split","hash","data","message"],"mappings":"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","sourcesContent":["const bcrypt = require(\"bcrypt\")\nconst jwt = require(\"jsonwebtoken\")\nconst { validationResult } = require(\"express-validator\")\n\nconst db = require(\"../db\")\n\nconst authController = {}\n\tauthController.signin = (req, res) => {\n\t\tres.status(422).json({\n\t\t\tstatus: \"error\",\n\t\t\terror: \"errors.array()\"\n\t\t})\t\t\t\t\n/*\t\tconst errors = validationResult(req)\n\t\tif (!errors.isEmpty()) \n\t\t{\n\t\t\tres.status(422).json({\n\t\t\t\tstatus: \"error\",\n\t\t\t\terror: errors.array()\n\t\t\t})\t\t\t\t\n\t\t}\n\t\n\t\tconst userEmail = req.body.email\n\t\tconst userPassword = req.body.password\t\n\t\n\t\tconst query = {\n\t\t\t// give the query a unique name\n\t\t\tname: \"fetch-user\",\n\t\t\ttext: \"SELECT * FROM users WHERE email = $1\",\n\t\t\tvalues: [userEmail]\n\t\t}\n\t\tdb.queryWhere(query)\n\t\t\t.then((user) => {\n\t\t\t\tif(user[0] === undefined)\n\t\t\t\t{\n\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\terror: \"incorrect email or password\"\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst userId = user[0].userId \n\t\t\t\t\tconst isAdmin = user[0].isAdmin\n\t\t\t\t\tbcrypt.compare(userPassword, user[0].password)\n\t\t\t\t\t\t.then((valid) => {\n\t\t\t\t\t\t\tif(!valid)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn res.status(401).json({\n\t\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\t\terror: \"incorrect email or password\"\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tconst token = jwt.sign({userId: userId, isAdmin: isAdmin},\"$hdsJmzjQ7,E.m2y$12$1iTvLIHS60iMROUjADnu8tdiUguselTrWjDo6SxVf\",\n\t\t\t\t\t\t\t\t{expiresIn: \"24h\"}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\tstatus : \"success\",\n\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\ttoken : token,\n\t\t\t\t\t\t\t\t\tuserId: user[0].userId,\n\t\t\t\t\t\t\t\t\tjobRole: user[0].jobRole\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})           \t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error)  => {\n\t\t\t\t\t\t\tres.status(401).json({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\terror: \"incorrect email or password\",\n\t\t\t\t\t\t\t})                    \n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tres.status(403).json({\n\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\terror: \"server error\"\n\t\t\t\t})\n\t\t\t})\t*/\n\t}\n\n\n\tauthController.emailExists = (email) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst query = {\n\t\t\t\t// give the query a unique name\n\t\t\t\tname: \"fetch-user\",\n\t\t\t\ttext: \"SELECT * FROM users WHERE email = $1\",\n\t\t\t\tvalues: [email],\n\t\t\t}\n\t\t\tdb.queryWhere(query)\n\t\t\t\t.then((user) => {\n\t\t\t\t\tif(user[0] !== undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t}\n\t\t\t\t\tresolve(false)\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject({\n\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\terror: \"could not perform request\"\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t})\n\t}\t\n\n\tauthController.createUser = (req, res) => {\n\t\tconst errors = validationResult(req)\n\t\tif (!errors.isEmpty())\n\t\t{\n\t\t\treturn res.status(422).json({\t\n\t\t\t\tstatus: \"error\",\n\t\t\t\terror: errors.array()\n\t\t\t})\n\t\t}\n\t\t\n\t\tconst { firstName, lastName, email, address, password, gender, jobRole, department, isAdmin } = req.body\n\t\n\t\tthis.emailExists(email)\n\t\t\t.then((isDuplicate) => {\n\t\t\t\tif(isDuplicate === true)\n\t\t\t\t{\n\t\t\t\t\treturn res.status(402).json({\n\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\terror: \"this email already exists\"\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst userId = new Date().getTime()\n\t\t\t\t\tconst token = (! req.headers.authorization) ? \"\" : req.headers.authorization.split()[1]\n\t\t\t\t\tbcrypt.hash(password, 10).then(\n\t\t\t\t\t\t(hash) => {\n\t\t\t\t\t\t\tconst query = {\n\t\t\t\t\t\t\t\tname: \"create-user\",\n\t\t\t\t\t\t\t\ttext: \"INSERT INTO users(\\\"userId\\\", \\\"firstName\\\", \\\"lastName\\\", \\\"email\\\", \\\"address\\\", \\\"password\\\", \\\"gender\\\", \\\"jobRole\\\", \\\"department\\\", \\\"isAdmin\\\", \\\"isNewAccount\\\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\",\n\t\t\t\t\t\t\t\tvalues: [userId, firstName, lastName, email, address, hash, gender, jobRole, department, isAdmin, true]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdb.queryWhere(query)\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\t\t\t\t\tstatus : \"success\",\n\t\t\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\t\t\tmessage: \"User account successfully created\",\n\t\t\t\t\t\t\t\t\t\t\ttoken : token,\n\t\t\t\t\t\t\t\t\t\t\tuserId: userId,\n\t\t\t\t\t\t\t\t\t\t\tjobRole: jobRole\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\t\t\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\t\tres.status(500).json({\n\t\t\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\t\t\terror: \"Internal server error \"  + error\n\t\t\t\t\t\t\t\t\t})\t\n\t\t\t\t\t\t\t\t})\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tres.status(500).json({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\terror: error\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tres.status(500).json({\n\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\terror: error\n\t\t\t\t})\n\t\t\t})\n\t\n\t}\n\nexport default authController"],"file":"auth.js"}