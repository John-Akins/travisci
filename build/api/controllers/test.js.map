{"version":3,"sources":["../../../api/controllers/test.js"],"names":["testController","test","req","res","query","db","then","status","json","error","console","log"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAMA,cAAc,GAAG,EAAvB;;AACCA,cAAc,CAACC,IAAf,GAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAE9B,MAAMC,KAAK,GAAG,qBAAd;AAEA;;;;;;;AAQAC,iBAAGD,KAAH,CAASA,KAAT,EACEE,IADF,CACO,YAAM;AACXH,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBD,MAAAA,MAAM,EAAG;AADW,KAArB;AAGA,GALF,WAMQ,UAACE,KAAD,EAAW;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBD,MAAAA,MAAM,EAAE,OADY;AAEpBE,MAAAA,KAAK,EAAE;AAFa,KAArB;AAIA,GAbF;AAcF,CA1BJ;;eA4BcT,c","sourcesContent":["import db from \"../db\"\r\n\r\nconst testController = {}\r\n\ttestController.test = (req, res) => {\r\n\r\n\t\t\t\t\t\t\tconst query = 'SELECT * FROM users'\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t/* 'CREATE TABLE test ( \"userId\" bigint NOT NULL, \"firstName\" character varying(30) COLLATE  pg_catalog.\"default\" NOT NULL, \"lastName\" character varying COLLATE pg_catalog.\"default\" NOT NULL, email character varying COLLATE  pg_catalog.\"default\" NOT NULL, address character varying COLLATE pg_catalog.\"default\" NOT NULL, password character varying COLLATE  pg_catalog.\"default\" NOT NULL, gender character varying COLLATE  pg_catalog.\"default\" NOT NULL, \"jobRole\" character varying COLLATE pg_catalog.\"default\" NOT NULL, department character varying COLLATE pg_catalog.\"default\" NOT NULL, \"isAdmin\" boolean NOT NULL, \"isNewAccount\" boolean NOT NULL DEFAULT true, CONSTRAINT test_pkey PRIMARY KEY (\"userId\"))'\r\n\r\n\t\t\t\t\t\t\t/*{\r\n\t\t\t\t\t\t\t\t\tname: \"create-user\",\r\n\t\t\t\t\t\t\t\ttext: \"INSERT INTO users(\\\"userId\\\", \\\"firstName\\\", \\\"lastName\\\", \\\"email\\\", \\\"address\\\", \\\"password\\\", \\\"gender\\\", \\\"jobRole\\\", \\\"department\\\", \\\"isAdmin\\\", \\\"isNewAccount\\\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\",\r\n\t\t\t\t\t\t\t\tvalues: [userId, firstName, lastName, email, address, hash, gender, jobRole, department, isAdmin, true]\r\n\t\t\t\t\t\t\t} */\r\n\r\n\t\t\t\t\t\t\tdb.query(query)\r\n\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\tres.status(200).json({\r\n\t\t\t\t\t\t\t\t\t\tstatus : \"success\"\r\n\t\t\t\t\t\t\t\t\t})\t\t\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"error:: :::\")\r\n\t\t\t\t\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\t\t\t\t\tres.status(500).json({\r\n\t\t\t\t\t\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\t\t\t\t\t\terror: \"Internal server error \"\r\n\t\t\t\t\t\t\t\t\t})\t\r\n\t\t\t\t\t\t\t\t})\t\t\r\n\t\t\t\t}\r\n\r\nexport default testController"],"file":"test.js"}