{"version":3,"sources":["../../../api/middleware/auth.js"],"names":["jwt","require","auth","allUsers","req","res","next","token","headers","authorization","split","decodedToken","verify","userId","body","e","status","json","error","adminOnly","isAdmin"],"mappings":";;;;;;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,IAAMC,IAAI,GAAG,EAAb;;AAEAA,IAAI,CAACC,QAAL,GAAgB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAG;AACF,QAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AACA,QAAMC,YAAY,GAAGX,GAAG,CAACY,MAAJ,CAAWL,KAAX,EAAkB,+DAAlB,CAArB;;AACA,QAAG;AAAA,UACMM,MADN,GACiBF,YADjB,CACME,MADN;;AAEF,UAAIT,GAAG,CAACU,IAAJ,CAASD,MAAT,IAAmBT,GAAG,CAACU,IAAJ,CAASD,MAAT,KAAoBA,MAA3C,EACA;AACC,cAAM,iBAAN;AACA,OAHD,MAKA;AACCP,QAAAA,IAAI;AACJ;AACD,KAVD,CAWA,OAAMS,CAAN,EAAS;AACRV,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,QAAAA,KAAK,EAAEH;AADa,OAArB;AAGA;AACD,GAnBD,CAoBA,OAAMA,CAAN,EAAS;AACRV,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,MAAAA,KAAK,EAAE,yBAAyBH;AADZ,KAArB;AAGA;AACD,CA1BD;;AA4BAb,IAAI,CAACiB,SAAL,GAAiB,UAACf,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAEpC,MAAG;AACF,QAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AACA,QAAMC,YAAY,GAAGX,GAAG,CAACY,MAAJ,CAAWL,KAAX,EAAkB,+DAAlB,CAArB;AAFE,QAGMM,MAHN,GAG0BF,YAH1B,CAGME,MAHN;AAAA,QAGcO,OAHd,GAG0BT,YAH1B,CAGcS,OAHd;;AAIF,QAAI;AACH,UAAIhB,GAAG,CAACU,IAAJ,CAASD,MAAT,IAAmBT,GAAG,CAACU,IAAJ,CAASD,MAAT,KAAoBA,MAA3C,EACA;AACC,cAAM,iBAAN;AACA;;AACD,UAAIO,OAAO,KAAK,IAAhB,EACA;AACC,cAAM,iCAAN;AACA,OAHD,MAKA;AACCd,QAAAA,IAAI;AACJ;AACD,KAbD,CAcA,OAAMS,CAAN,EAAS;AACRV,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,QAAAA,KAAK,EAAEH;AADa,OAArB;AAGA;AACD,GAvBD,CAwBA,OAAMA,CAAN,EAAS;AACRV,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,MAAAA,KAAK,EAAE;AADa,KAArB;AAGA;AACD,CA/BD;;eAiCehB,I","sourcesContent":["const jwt = require(\"jsonwebtoken\")\n\nconst auth = {}\n\nauth.allUsers = (req, res, next) => {\n\ttry{\n\t\tconst token = req.headers.authorization.split(\" \")[1]\n\t\tconst decodedToken = jwt.verify(token, \"$hdsJmzjQ7,E.m2y$12$1iTvLIHS60iMROUjADnu8tdiUguselTrWjDo6SxVf\")\n\t\ttry{\n\t\t\tconst { userId } = decodedToken\n\t\t\tif( req.body.userId && req.body.userId !== userId )\n\t\t\t{\n\t\t\t\tthrow \"Invalid user ID\"\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnext()\n\t\t\t}\n\t\t}\n\t\tcatch(e) {\n\t\t\tres.status(401).json({\n\t\t\t\terror: e\n\t\t\t})\n\t\t}\n\t}\n\tcatch(e) {\n\t\tres.status(401).json({\n\t\t\terror: \"Unauthorized request\" + e\n\t\t})\n\t}\n}\n\nauth.adminOnly = (req, res, next) => {\n\n\ttry{\n\t\tconst token = req.headers.authorization.split(\" \")[1]\n\t\tconst decodedToken = jwt.verify(token, \"$hdsJmzjQ7,E.m2y$12$1iTvLIHS60iMROUjADnu8tdiUguselTrWjDo6SxVf\")\n\t\tconst { userId, isAdmin } = decodedToken\n\t\ttry {\n\t\t\tif( req.body.userId && req.body.userId !== userId )\n\t\t\t{\n\t\t\t\tthrow \"Invalid user ID\"\n\t\t\t}\n\t\t\tif( isAdmin !== true )\n\t\t\t{\n\t\t\t\tthrow \"Elevated access rights required\"\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnext()\n\t\t\t}\n\t\t}\n\t\tcatch(e) {\n\t\t\tres.status(401).json({\n\t\t\t\terror: e\n\t\t\t})\n\t\t}\n\t}\n\tcatch(e) {\n\t\tres.status(401).json({\n\t\t\terror: \"Unauthorized request\"\n\t\t})\n\t}\n}\n\nexport default auth"],"file":"auth.js"}